// * === Переменные === * \\
// В основном по дефолту используем const для обозначения переменных, которые не будут изменяться, для особенных, которые всё таки будут — используем let.

// Есть 7 скалярных типов данных (примитивов)
const num = 5; // цифры
const str = 'Hello world!'; // строка
let bool = true; // булево значение принимает либо true, либо false
let und; // undefined (это значение мы почти никогда сами не присваиваем, но его присваивает сам JS, когда не может найти какое-то значение, к которому мы обращаемся)
const bigInt = 25002195224663795n; // целые большие числа > 2^53
const symbol = Symbol(); // уникальные неизменяемые данные

let donutHole = null; // специальный примитив (пустое значение, которое, в отличии от undefined, используют разработчики, которые например задают какую-то переменную, но пока в ней никакого значения не требуется, но в будущем оно будет, либо наоборот, когда им нужно избавиться от данных, то их можно перезаписать null'ом)

// Также есть структурные типы данных
let object = {
	a: 5,
	b: 'javascript',
	c: false,
	d: {
		a: 10,
		b: 15
	},
	e: [1, 2, 3]
}; // объект
console.log(object.d);
console.log(object['e']);
object.e = [4, 5];
console.log(object['e']);
object.names = ['Kate', 'Al'];
console.log(object);
object = null;
console.log(object);


const array = [1, 'b', {a: 2, b: 'hello'}, true]; // массив (разновидность объекта)
console.log(array[2]);

// Функции в различном написании
const func1 = function () {}; // функции
const func2 = () => {}; // функции

// Специальные объекты
const regExp = new RegExp(); // регулярные выражения
const regExp2 = /D/g; // регулярные выражения в иной записи
const error = new Error(); // ошибки
const date = new Date(); // для работы с датами

// 2 коллекции
const map = new Map();
const set = new Set();

// Для определения типа данных есть унарный оператор typeof. Унарный значит, что он содержит один операнд. Возвращает строку с описанием определённого типа данных.
console.log(typeof bigInt);