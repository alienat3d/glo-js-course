export class UserService {
	// * 1.0 У данного класса будет 1 переменная "_users", написанная с "_", т.к. мы будем работать с ней через геттеры и сеттеры. Изначально она будет содержать пустой массив.
	// * 5.0 Создадим парочку временных объектов, которые мы сможем рендерить методом render()
	// todo upd. Больше он нам не нужен, т.к. теперь мы получаем пользователей из [../../db/users.json]
	/* 	_users = [
			{
				"id": 0,
				"name": "Al",
				"email": "psy.alienated@gmail.com",
				"children": true,
				"permissions": true
			},
			{
				"id": 1,
				"name": "Andrey",
				"email": "antr0y@yahoo.com",
				"children": true,
				"permissions": false
			}
		]; */

	// 1.1 Ну, и сразу же создадим геттер (будет получать данные) и сеттер (будет переопределять значение) для данной переменной
	// todo upd. Впрочем, как и сеттеры и геттеры больше не нужны.
	/* 	get users() {
			return this._users;
		}
	
		set users(users) {
			this._users = users;
		} */

	// * 2. Напишем тестовый метод, который будет выводить в консоль наших пользователей
	// todo upd. Да и метод logger() можно убрать
	/* 	logger() {
			console.log(this.users);
		} */

	// * 6.0 getUsers() будет возвращать результат метода fetch(). По умолчанию метод fetch() использует настройку method="GET".
	// ? 6.2 На самом деле мы могли бы просто экспортировать функцию получения данных с сервера, но тут мы разобрали на практике как пишутся реальные сервисы
	getUsers() {
		return fetch('http://localhost:3333/users')
			.then(res => res.json());
	}

	// 7.3.1 Теперь нам нужен в сервисах ещё один метод, который будет использовать "POST" для записи объекта в базу данных и который будет добавлять нового пользователя. В настройках запишем, что уже используем "POST", а также в body передаём "user", обработанный методом JSON.stringify(), ну и headers мы подсмотрим из документации к JSON-Server, нам нужны настройки: 'Content-Type': 'application/json'.
	// todo 7.3.2 Вернёмся в [add-users.js]
	// 7.4.0 Добавим и у addUsers() метод then(), чтобы переводить ответ обратно в JSON.
	// todo 7.4.1 Вернёмся в [add-users.js]
	addUser(user) {
		return fetch('http://localhost:3333/users', {
			method: 'POST',
			body: JSON.stringify(user),
			headers: {
				'Content-Type': 'application/json'
			}
		})
			.then(res => res.json());
	}

	// * 8.0 Теперь нам нужен ещё метод удаления пользователей. Для этого нам нужно отслеживать по какому именно пользователю мы кликаем. Для этого мы могли бы повесить на каждую кнопку удаления пользователя обработчик события, но лучше воспользуемся делегированием, и для этого создадим новый модуль remove-users.js
	// 8.3.1 Теперь нам только осталось в сервисах добавить метод removeUser(), который будет принимать идентификатор (key\id) и возвращать метод fetch().
	// 8.3.2 В документации к JSON-Server мы найдём, что нам нужно добавить id пользователя после запроса и "/". Ну и не забудем про конвертацию из JSON в JS-объект методом then().
	// 8.5 Итак, чтобы удалить, нам нужно прописать в настройках ещё специальный метод "DELETE"
	removeUser(id) {
		return fetch(`http://localhost:3333/users/${id}`, {
			method: "DELETE"
		})
			.then(res => res.json());
	}
}